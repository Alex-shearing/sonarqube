pluginManagement {
  repositories {
    maven {
      url 'https://repox.jfrog.io/repox/plugins.gradle.org/'
      authentication {
        header(HttpHeaderAuthentication)
      }
      credentials(HttpHeaderCredentials) {
        name = "Authorization"
        value = "Bearer $System.env.ARTIFACTORY_PRIVATE_PASSWORD"
      }
    }
  }
  plugins {
    id 'com.bmuschko.docker-remote-api' version '7.3.0'
    id 'org.ajoberstar.grgit' version '4.1.1'
  }
}

plugins {
  id 'com.gradle.enterprise' version '3.15.1'
}
ext.isCiServer = System.getenv().containsKey("CIRRUS_CI")

gradleEnterprise {
  if (System.getenv().containsKey('GRADLE_ENTERPRISE_URL')) {
    server = System.env.'GRADLE_ENTERPRISE_URL'
  }
  allowUntrustedServer = true // ensure a trusted certificate is configured

  if (isCiServer) {
    accessKey = System.env.'GRADLE_ENTERPRISE_KEY'
  }

  buildScan {
    capture { taskInputFiles = true }
    uploadInBackground = false
    publishAlwaysIf( isCiServer )
  }
}

rootProject.name = 'sonarqube'

include 'plugins:sonar-xoo-plugin'
include 'plugins:sonar-education-plugin'

include 'server:sonar-auth-common'
include 'server:sonar-auth-bitbucket'
include 'server:sonar-auth-github'
include 'server:sonar-auth-gitlab'
include 'server:sonar-auth-ldap'
include 'server:sonar-auth-saml'
include 'server:sonar-ce'
include 'server:sonar-ce-common'
include 'server:sonar-ce-task'
include 'server:sonar-ce-task-projectanalysis'
include 'server:sonar-db-core'
include 'server:sonar-db-dao'
include 'server:sonar-db-migration'
include 'server:sonar-main'
include 'server:sonar-process'
include 'server:sonar-server-common'
include 'server:sonar-web'
include 'server:sonar-web:design-system'
include 'server:sonar-webserver'
include 'server:sonar-webserver-api'
include 'server:sonar-webserver-auth'
include 'server:sonar-webserver-common'
include 'server:sonar-webserver-core'
include 'server:sonar-webserver-es'
include 'server:sonar-webserver-webapi'
include 'server:sonar-webserver-webapi-v2'
include 'server:sonar-webserver-pushapi'
include 'server:sonar-webserver-ws'
include 'server:sonar-alm-client'
include 'server:sonar-webserver-monitoring'

include 'sonar-application'
include 'sonar-core'
include 'sonar-duplications'
include 'sonar-markdown'
include 'sonar-plugin-api-impl'
include 'sonar-scanner-engine'
include 'sonar-scanner-engine-shaded'
include 'sonar-scanner-protocol'
include 'sonar-shutdowner'
include 'sonar-testing-harness'
include 'sonar-testing-ldap'
include 'sonar-ws'
include 'sonar-ws-generator'
include 'test-monitoring'
include 'ut-monitoring'


// use Settings.getRootDir() so that it doesn't matter which directory you are executing from
File extraSettings = new File(rootDir, 'private/private-settings.gradle')
if (extraSettings.exists()) {
  apply from: extraSettings
}

buildCache {
  local {
    enabled = !isCiServer
  }

  remote(HttpBuildCache) {
    url = System.env.'GRADLE_ENTERPRISE_URL' + '/cache/'
    allowUntrustedServer = true
    credentials { creds ->
      creds.username = System.env.'GRADLE_ENTERPRISE_USERNAME'
      creds.password = System.env.'GRADLE_ENTERPRISE_PASSWORD'
    }
    enabled = true
    push = isCiServer
  }
}